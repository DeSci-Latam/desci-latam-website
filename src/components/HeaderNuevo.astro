---
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations, type Lang } from "@/i18n";
import { ThemeToggle } from "@/components/theme-toggle";
import Search from "@/components/Search";
import LocaleSelect from "@/components/i18n/LocaleSelect";
import { TailcastLogo } from "../assets/logos/TailcastLogo";

const t = useTranslations(Astro.currentLocale as Lang);
const locale = Astro.currentLocale as Lang;

const isActive = (path: string) =>
  getRelativeLocaleUrl(locale, path) === Astro.url.pathname;
---

<header class="fixed w-full z-40 bg-background border-b border-gray-800">
  <div class="max-w-7xl mx-auto px-4">
    <div class="flex items-center h-16">
      <div class="flex items-center flex-1">
        <!-- Logo -->
        <a
          href={getRelativeLocaleUrl(locale, "/")}
          class="flex items-center"
        >
          <TailcastLogo />
        </a>

        <!-- Navigation -->
        <nav class="hidden md:flex items-center ml-8 ">
          <!-- Comunidad Dropdown -->
          <div class="dropdown" data-dropdown>
            <button tabindex={0} class="btn btn-ghost btn-sm normal-case  text-gray-300 hover:text-white flex items-center gap-1">
              {t({ es: "Comunidad", en: "Community", pt: "Communidade" })}
              <svg 
                class="w-4 h-4" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                stroke-width="2"
              >
                <path d="M6 9l6 6 6-6"/>
              </svg>
            </button>
            
            <ul class="dropdown-content hidden z-[1] menu p-2  shadow-lg bg-[#1a1f24] border border-gray-800 rounded-md w-52">
              <h2 class="menu-title">Title</h2>
              <li>
                <a href={getRelativeLocaleUrl(locale, "/changelog")} class="text-gray-300 hover:text-white hover:bg-gray-800">
                  {t({ es: "Changelog", en: "Changelog", pt: "Changelog" })}
                </a>
              </li>
            </ul>
          </div>

          <!-- Ecosistema Dropdown -->
          <div class="dropdown" data-dropdown>
            <button tabindex={0} class="btn btn-ghost btn-sm normal-case text-gray-300 hover:text-white flex items-center gap-1">
              {t({ es: "Ecosistema", en: "Ecosystem", pt: "Ecosistema" })}
              <svg 
                class="w-4 h-4" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                stroke-width="2"
              >
                <path d="M6 9l6 6 6-6"/>
              </svg>
            </button>
            <ul class="dropdown-content hidden z-[1] menu p-2 shadow-lg bg-[#1a1f24] border border-gray-800 rounded-md w-52">
              <li>
                <a href={getRelativeLocaleUrl(locale, "/ecosystem/funding/")} class="text-gray-300 hover:text-white hover:bg-gray-800">
                  {t({ es: "Financiamiento", en: "Funding", pt: "Financiamento" })}
                </a>
              </li>
            </ul>
          </div>

          <!-- Blog -->
          <a
            href={getRelativeLocaleUrl(locale, "/blog")}
            class:list={[
              "btn btn-ghost btn-sm normal-case text-gray-300 hover:text-white",
              { "text-white": isActive("/blog") }
            ]}
          >
            {t({ es: "Blog", en: "Blog", pt: "Blog" })}
          </a>
        </nav>
      </div>

      <!-- Right Section -->
      <div class="flex items-center space-x-4">
        <Search />
        <ThemeToggle client:load />
        <LocaleSelect />
      </div>
    </div>
  </div>
</header>

<script>
  function setupDropdowns() {
    const dropdowns = document.querySelectorAll('[data-dropdown]');
    let timeout: ReturnType<typeof setTimeout>;

    dropdowns.forEach(dropdown => {
      const content = dropdown.querySelector('.dropdown-content');
      let isHovered = false;

      // Mostrar dropdown
      const show = () => {
        clearTimeout(timeout);
        content?.classList.remove('hidden');
        isHovered = true;
      };

      // Ocultar dropdown con delay
      const hide = () => {
        isHovered = false;
        timeout = setTimeout(() => {
          if (!isHovered) {
            content?.classList.add('hidden');
          }
        }, 150); // Delay para permitir mover el cursor al contenido
      };

      // Event listeners para el botón y el contenido
      dropdown.addEventListener('mouseenter', show);
      dropdown.addEventListener('mouseleave', hide);
      
      // Prevenir cierre cuando se hace click en el contenido
      content?.addEventListener('mouseenter', () => {
        clearTimeout(timeout);
        isHovered = true;
      });
      
      content?.addEventListener('mouseleave', hide);

      // Mantener abierto al hacer click en el botón
      const button = dropdown.querySelector('button');
      button?.addEventListener('click', (e) => {
        e.preventDefault();
        if (content?.classList.contains('hidden')) {
          show();
        }
      });
    });

    // Cerrar dropdowns al hacer click fuera
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      dropdowns.forEach(dropdown => {
        if (!dropdown.contains(target)) {
          dropdown.querySelector('.dropdown-content')?.classList.add('hidden');
        }
      });
    });
  }

  // Inicializar dropdowns
  setupDropdowns();

  // Reinicializar en navegación con View Transitions
  document.addEventListener('astro:page-load', setupDropdowns);
</script>

<style>
  /* Estilos base del dropdown */
  .dropdown-content {
    margin-top: 0.5rem;
    min-width: 8rem;
  }

  /* Resto de estilos... */
  .btn-ghost:hover {
    background-color: transparent !important;
  }

  .text-white {
    font-weight: 500;
  }

  .btn {
    height: 2.5rem;
    min-height: 2.5rem;
    @apply font-normal;
  }
</style>